// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Comment {
  id          String       @id @default(cuid())
  content     String       @db.LongText
  dateCreated DateTime     @default(now())
  taskId      String
  creatorId   String?
  user        User?        @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  task        WeightedTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Message {
  id           String   @id @default(cuid())
  content      String   @db.LongText
  dateCreated  DateTime @default(now())
  messageProps String?  @db.LongText
  teamId       String
  creatorId    String?
  user         User?    @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  team         Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Membership {
  id          String   @id @default(cuid())
  memberId    String
  teamId      String
  status      String
  dateCreated DateTime @default(now())
  user        User     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Team {
  id          String         @id @default(cuid())
  dateCreated DateTime       @default(now())
  title       String
  description String         @db.LongText
  creatorId   String
  memberships Membership[]
  messages    Message[]
  tasks       WeightedTask[]
  user        User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model WeightedTask {
  id           String    @id @default(cuid())
  title        String
  content      String?   @db.LongText
  userId       String
  teamId       String?
  parentId     String    @default("")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team         Team?     @relation(fields: [teamId], references: [id], onDelete: SetNull)
  comments     Comment[]
  dateCreated  DateTime  @default(now())
  weightRating Int?
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  teams         Team[]
  messages      Message[]
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  memberships   Membership[]
  weightedTasks WeightedTask[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
